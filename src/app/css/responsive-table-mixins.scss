@mixin initalValues($widths) {



    $count-w: 0;

    @each $width in $widths {
        $count-w: $count-w + 1;

        .cell:nth-child(#{$count-w}) {
            flex: #{$width};
        }

        .header:nth-child(#{$count-w}) {
            flex: #{$width};
        }
    }

    $count-w: $count-w+1;

    .cell:nth-child(1n+#{$count-w}) {
        flex: 1;
    }

    .header:nth-child(1n+#{$count-w}) {
        flex: 1;
    }
}

@mixin responsive-limit($max-width, $pattern) {

    @media (max-width: $max-width) {
        $count: 0;

        .table {

            .header-rows,
            .rows {
                flex-wrap: wrap;

            }

            @each $var in $pattern {
                $count: ($count + 1);

                @if($var > 0) {
                    .cell:nth-child(#{$count}) {
                        order: $var;
                        color: blue;
                    }

                    .cell:nth-child(#{$count}) {
                        width: 100%;
                        flex: auto;

                        .cellheader {
                            display: inline;

                        }

                    }

                    .cell:nth-child(#{$count}) {
                        overflow: hidden;
                        max-height: 0;
                        min-height: 0;
                        padding: 0;
                        border: 0;
                    }

                    .rows.show .cell {
                        overflow: show;
                        background-color: red;
                        max-height: 300px;
                        // min-height: $min-height;
                        transition: max-height 0.2s ease-in;
                    }


                    .cell:nth-child(#{$count}) .div-header {
                        display: initial;
                    }

                    .header:nth-child(#{$count}) {
                        display: none;
                    }
                }
            }

            $count:$count+1;

            .cell:nth-child(1n+#{$count}) {
                order: 0;
                color: green;
            }
        }
    }
}


@function mapValueToArray($cols) {
    $arr: ();

    @each $var,
    $val in $cols {
        $arr: append($arr, $val);
    }

    @return $arr;
}

@mixin responsive-colums($limit, $cols) {
    $arr: mapValueToArray($cols);
    @include responsive-limit($limit, $arr);
}
$show: 0;
$hide: 1;